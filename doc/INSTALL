Tux Typing 1.8.3
19 Aug 2014

NOTE - this document is reasonably correct but not completely current.
It will updated as the maintainer's time allows. For GNU/Linux users, you
need the "*dev" files for the SDL libs listed below, and should have the
dev file for SDL_Pango if you want to display non-Western text.  TuxType
will build successfully, but without SDL_Pango support, if this header/lib
is not found.

Most GNU/Linux users can install Tux Typing with their distribution's 
package manager (such as apt or yum).  To build from source, you can grab
the tuxtype_w_fonts*tar.gz, untar it, and build with "./configure; make;
make install".  You do not need Autotools unless you are building from
a Subversion repository checkout.  MacOSX users and Windows users can
install with very user-friendly binary installer packages - DSB.

The current web site is http://www.tux4kids.com.
The developer mailing list is tux4kids-tuxtype-dev@lists.alioth.debian.org.
Feel free to email with any feedback or questions. 

Quick Installation
==================

 Tuxtype should compile out of the box if you have a sane tool chain
 and the following SDL libraries:

 SDL-1.2.5            http://www.libsdl.org
 SDL_image-1.2.3      http://www.libsdl.org/projects/SDL_image
 SDL_mixer-1.2.5      http://www.libsdl.org/projects/SDL_mixer

 (more recent versions are OK and probably have fewer bugs)

 And either:
 SDL_ttf-2.0.5        http://www.libsdl.org/projects/SDL_ttf
 or
 SDL_Pango            http://sdlpango.sourceforge.net

 SDL_Pango will be used if found as it provides complex rendering needed
 for many non-Western languages. If SDL_Pango is not available, it is necessary to disable use of this library at configure time with "--without-sdlpango".

 Tuxtype links to librsvg if available, as we will soon use SVG graphics, but
 for now it is fine to disable this with "--without-rsvg" at configure time.

Notes:
 These libraries in turn have other dependencies (jpeg, tiff, smpeg, ogg,
 freetype, etc.) that your package manager will take care of, unless you
 are building everything by hand.


For most people using Linux:

./configure --without-rsvg
make
make install (or "sudo make install", if needed to install to default location).

You can install to a different location by setting a prefix with:
 
./configure --without-rsvg --prefix=[your desired location]

instead of just "./configure".  The default prefix is /usr/local

More configure options can be viewed with "./configure --help".

If you run into problems, run:

autoreconf --install

This will re-generate the configure script from configure.ac, and all the Makefile.in's from
the corresponding Makefile.am's.  You should not need to do this if you are building from
a tuxtype*.tar.gz (but will need to do this if building from a Subversion checkout).

Note - if you have SDL_Pango available, you can use the package without bundled fonts (e.g. 
tuxtype-1.8.1.tar.gz).  The tarball with the bundled fonts, e.g. tuxtype_w_fonts-1.8.1.tar.gz.
will work fine whether or not SDL_Pango is available.  The unused fonts will simply take up about 2.5 MB on your hard drive.

We want this to work for everybody, everywhere, if it doesn't
work for you please contact: tux4kids-tuxtype-dev@lists.alioth.debian.org

You may also contact me directly at:
davidstuartbruce@gmail.com

===============================================================================================

(below are reproduced some generic instructions on how to build and
install packages that require "./configure; make; make install". They
were not written specifically for tuxtype).


Basic Installation
==================

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.ac' is used to create `configure' by a program
called `autoconf'.  You only need `configure.ac' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes a while.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Type `make install' to install the programs and any data files and
     documentation.

  4. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.

  5. You can uninstall the program by typing `make uninstall' (trust me
     this really does work ;)

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.


Operating System Specific Installation
======================================

Fedora 31
---------

Install dependencies from repositories

  sudo dnf install librsvg2-devel automake autoconf SDL_ttf-devel ImageMagick desktop-file-utils SDL-devel SDL_image-devel SDL_mixer-devel SDL_Pango-devel gettext-devel SDL_net-devel


Get and install common files

  wget https://github.com/tux4kids/t4kcommon/archive/upstream/0.1.1.tar.gz
  tar -xvf 0.1.1.tar.gz 
  cd t4kcommon-upstream-0.1.1/
  mkdir build
  cd build/
  ../configure 
  ../configure --prefix=/your/t4kcommon/preferred/location --without-rsvg
  make
  make install
  export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/your/t4kcommon/preferred/location/lib/pkgconfig

Install Tuxtype

    wget https://github.com/tux4kids/tuxtype/archive/upstream/1.8.3.tar.gz
    tar -xvf 1.8.3.tar.gz
    cd tuxtype-upstream-1.8.3/
    aclocal
    autoconf
    automake --add-missing
    autoreconf --install
    mkdir build
    cd build
    ../configure --without-rsvg --prefix=/your/install/location
    make
    sudo make install
    


